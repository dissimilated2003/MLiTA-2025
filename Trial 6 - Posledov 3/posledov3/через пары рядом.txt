/*
    ВОЛИК АНДРЕЙ ОЛЕГОВИЧ ПС-23

    10.5. Последовательность 3 (5)

        Задана неубывающая последовательность целых чисел. Найти количество пар 
    чисел с заданной разностью D.
        Ввод из файла INPUT.TXT. В первой строке задаются через пробел 
    два целых числа: количество членов последовательности N и разность D 
    (2 ≤ N ≤ 10^6, 1 ≤ D ≤ 10^9). Во второй строке вводятся через пробел N натуральных 
    чисел последовательности A1 ≤ A2 ≤ ... ≤ AN  (Ai ≤ 10^9).
        Вывод в файл OUTPUT.TXT. Вывести число пар (Ai, Aj) таких, что Ai – Aj = D.

    Ограничения: Объем используемой памяти до 1 Мб.
            -------------------------------------
            |    input.txt:                     |
   Пример:  |    10 7                           |
            |    3 5 12 18 25 40 47 47 48 49    |
            |-----------------------------------|
            |    output.txt:                    |
            |    4                              |
            -------------------------------------

    Источник: --
*/

#include <cstddef>
#include <iostream>
#include <fstream>
#include <chrono>
#include <iomanip>
#include <new>
#include <atomic>
#include <cstdint>

std::atomic<uint64_t> kBytesAllocated{0};

void* operator new(std::size_t count) {
    kBytesAllocated.fetch_add(count);
    return std::malloc(count);
}

void operator delete(void* ptr) {
    std::free(ptr);
}

int CalculatePairsWithDifference(std::ifstream& input, int n, int d) 
{
    long long count = 0;
    int current_value, prev_target_value = -1;
    int current_size = 0, prev_target_size = 0;

    input >> current_value;
    current_size = 1;
    prev_target_value = current_value + d;
    prev_target_size = 0;

    for (int i = 1; i < n; ++i) 
    {
        int num;
        input >> num;

        if (num == current_value) 
        {
            current_size++;
        }
        else 
        {
            if (current_value == prev_target_value) 
            {
                count += current_size * prev_target_size;
            }

            int new_target_value = num - d;
            if (new_target_value == current_value) 
            {
                prev_target_value = num;
                prev_target_size = current_size;
            }
            else {
                prev_target_value = num - d;
                prev_target_size = 0;
            }

            current_value = num;
            current_size = 1;
        }
    }

    if (current_value == prev_target_value) 
    {
        count += current_size * prev_target_size;
    }

    return count;
}

int main() {
    auto start = std::chrono::high_resolution_clock::now();

    std::ifstream input("input.txt");
    int n, diff;
    input >> n >> diff;
    std::cout << "N = " << n << ", D = " << diff << "\n";

    int result = CalculatePairsWithDifference(input, n, diff);

    std::ofstream output("output.txt");
    output << result << "\n";
    std::cout << "\n" << result << "\n\n";

    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double, std::milli> elapsed = end - start;
    double elapsed_seconds = elapsed.count() / 1000.0;
    std::cout << std::fixed << std::setprecision(3) << elapsed_seconds << " sec." << "\n";

    float bytesAllocated = static_cast<float>(kBytesAllocated);
    float kbAllocated = bytesAllocated / 1024.0f;
    float mBytesAllocated = kbAllocated / 1024.0f;
    std::cout << "Bytes allocated on heap: " << bytesAllocated << "\n";
    std::cout << "Kilobytes: " << kbAllocated << "\n";
    std::cout << "Megabytes: " << mBytesAllocated << "\n";
    return 0;
}